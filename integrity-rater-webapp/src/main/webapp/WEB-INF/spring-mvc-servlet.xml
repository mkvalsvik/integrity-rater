<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
 xmlns:context="http://www.springframework.org/schema/context"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd ">

<!-- Load environment-specific properties such as database ports and passwords -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	
	<!-- This setting allows us to override properties with JVM system properties OR host OS system properties -->
	<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	
	<!-- Location of property file(s) -->
    <property name="locations">
        <list>
            <value>classpath:default.webapp.properties</value>			
        </list>
    </property>
</bean>

<!-- Render server-side java exceptions to the browser and log files, with a unique reference code, and also optionally with a stack trace for easy troubleshooting -->
<bean id="exceptionResolver" class="org.catamarancode.spring.mvc.HtmlAndJsonExceptionResolver">
    <property name="productionEnvironmentString" value="false"/>
    <!-- defaults to errorView=error -->
</bean>

<!-- Tells Spring to keep hibernate sessions open until web requests are complete, thereby enabling use of hibernate lazy loading -->
<bean name="openSessionInViewInterceptor"
 class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
    <property name="sessionFactory">
        <ref bean="sessionFactory"/>
    </property>
</bean>

<!-- Wrap the logged in user in a UserContext and stick it in ThreadLocal for easy retrieval later from Controllers and Domain objects -->
<bean name="userContextInterceptor"
 class="org.integrityrater.service.user.UserContextInterceptor">
    <property name="repository">
        <ref bean="repository"/>
    </property>
</bean>

<!-- Tells Spring MVC to look for web request handlers (controllers) that are marked with a @Controller annotation --> 
<bean id="annotationMapper" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    <!-- make this mapper before  other mappers -->
    <property name="order" value="0"/>
    <property name="interceptors">
        <list>
            <ref bean="openSessionInViewInterceptor"/>
			<ref bean="userContextInterceptor"/>
        </list>
    </property>
</bean>

<!-- Tells Spring MVC where to look for controller classes marked with an @Controller annotation -->
<context:component-scan base-package="org.integrityrater.web"/>

<!-- Tells freemarker where to look for .FTL files -->
<bean id="freemarkerConfig"
 class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">

	<!-- Proper setting for loading templates form within the webapp --> 
    <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
	
	<!-- Temporary setting for seeing development changes right away without copying/building to the webapp 
	NOTE: Deprecated way.  See build script build_local.sh for a better way 
	<property name="templateLoaderPath" value="file:///bh/ws/steward-quality/src/main/webapp/WEB-INF/freemarker/"/>
	-->
</bean>

<!-- Tells Spring MVC to use freemarker to render views -->
<bean id="freemarkerViewResolver"
 class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
    <property name="cache" value="true"/>
    <property name="prefix" value=""/>
    <property name="suffix" value=".ftl"/>
    <property name="exposeSpringMacroHelpers" value="true"/>
</bean>
	
	<!-- This tells Spring MVC to look up a specific view by name in the WEB-INF/views.xml file before consulting other viewResolvers -->
    <bean name="xmlViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
    	<property name="order" value="0" />
	</bean>

</beans>
